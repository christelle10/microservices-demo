/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.0.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.microservices.enrollment.enrollment.api;

import com.practice.enrollment.model.Enrollment;
import com.practice.enrollment.model.EnrollmentRequest;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-03-23T18:57:13.366899+08:00[Asia/Manila]")
@Validated
@Tag(name = "Default", description = "the Default API")
public interface DefaultApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /enrollments : Enroll a student in a school
     *
     * @param enrollmentRequest  (required)
     * @return Enrollment created successfully (status code 201)
     */
    @Operation(
        operationId = "enrollStudent",
        summary = "Enroll a student in a school",
        responses = {
            @ApiResponse(responseCode = "201", description = "Enrollment created successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Enrollment.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/enrollments",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Enrollment> enrollStudent(
        @Parameter(name = "EnrollmentRequest", description = "", required = true) @Valid @RequestBody EnrollmentRequest enrollmentRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"studentId\" : 6, \"schoolId\" : 1, \"enrollmentDate\" : \"2000-01-23\", \"id\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /enrollments : Get all enrollments
     *
     * @return List of enrollments (status code 200)
     */
    @Operation(
        operationId = "getAllEnrollments",
        summary = "Get all enrollments",
        responses = {
            @ApiResponse(responseCode = "200", description = "List of enrollments", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Enrollment.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/enrollments",
        produces = { "application/json" }
    )
    default ResponseEntity<List<Enrollment>> getAllEnrollments(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"studentId\" : 6, \"schoolId\" : 1, \"enrollmentDate\" : \"2000-01-23\", \"id\" : 0 }, { \"studentId\" : 6, \"schoolId\" : 1, \"enrollmentDate\" : \"2000-01-23\", \"id\" : 0 } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /enrollments/{id} : Get enrollment by ID
     *
     * @param id  (required)
     * @return Enrollment details (status code 200)
     */
    @Operation(
        operationId = "getEnrollmentById",
        summary = "Get enrollment by ID",
        responses = {
            @ApiResponse(responseCode = "200", description = "Enrollment details", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Enrollment.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/enrollments/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<Enrollment> getEnrollmentById(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"studentId\" : 6, \"schoolId\" : 1, \"enrollmentDate\" : \"2000-01-23\", \"id\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /enrollments/students/{studentId} : Get enrollments for a specific student
     *
     * @param studentId  (required)
     * @return List of student enrollments (status code 200)
     */
    @Operation(
        operationId = "getEnrollmentsByStudent",
        summary = "Get enrollments for a specific student",
        responses = {
            @ApiResponse(responseCode = "200", description = "List of student enrollments", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Enrollment.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/enrollments/students/{studentId}",
        produces = { "application/json" }
    )
    default ResponseEntity<List<Enrollment>> getEnrollmentsByStudent(
        @Parameter(name = "studentId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("studentId") Integer studentId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"studentId\" : 6, \"schoolId\" : 1, \"enrollmentDate\" : \"2000-01-23\", \"id\" : 0 }, { \"studentId\" : 6, \"schoolId\" : 1, \"enrollmentDate\" : \"2000-01-23\", \"id\" : 0 } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
